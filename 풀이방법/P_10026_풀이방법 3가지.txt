내가푼거. 탐색함수를 2개 만들어서 일반인, 적록색약 따로

1. map을 입력받을때 map 배열을 2개 만들어서, 2번째 배열에는 G를 R로 저장하는 방법
2. 첫번째 탐색이 끝나고 G를 R로 바꾸기

동적할당을 사용하지 않고 하면 메모리 더 적게 차지하는지 
집가서 볼 코드
 

#include <iostream>
#include <vector>

#define FAST_IO cin.tie(NULL)->ios::sync_with_stdio(false);

using namespace std;


vector<vector<char>> board;
vector<vector<bool>> visited;
int N;

int dx[4] = {0, 0, 1, -1},
    dy[4] = {1, -1, 0, 0};

void find_region(int row, int col) {
    char color = board[row][col]; // 현재 색상 저장

    for(int i = 0; i < 4; i++) {
        int newRow = row + dx[i], newCol = col + dy[i];

        if(newRow >= 0 && newRow < N && newCol >= 0 && newCol < N
           && !visited[newRow][newCol]
           && board[newRow][newCol] == color) {
            visited[newRow][newCol] = true;
            find_region(newRow, newCol);
        }
    }

    if(board[row][col] == 'G') {
        board[row][col] = 'R';
    }
}

int getCount() {
    for(int i = 0; i < N; i++) {
        fill(visited[i].begin(), visited[i].end(), false);
    }

    int count = 0;

    for(int i = 0; i < N; i++) {
        for(int j = 0; j < N; j++) {
            if(!visited[i][j]) {
                visited[i][j] = true;
                count++;
                find_region(i, j);
            }
        }
    }

    return count;
}

int main() {
    FAST_IO

    cin >> N;
    board.assign(N, vector<char>(N));

    for(int i = 0; i < N; i++) {
        string s;
        cin >> s;
        for(int j = 0; j < N; j++) {
            board[i][j] = s[j];
        }
    }

    visited.assign(N, vector<bool>(N, false));

    int count1 = getCount(), count2 = getCount();
    cout << count1 << " " << count2;

    return EXIT_SUCCESS;
}